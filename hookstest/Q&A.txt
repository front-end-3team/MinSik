Q1. 리액트를 사용하는 이유를 설명해보세요 (2가지 이상)
    - 실제 돔을 건드리지 않고 가상 돔(단순한 자바스크립트 객체)을 이용해 렌더링 시 빠른 성능을 기대할 수 있고 비용 측면에서도 유리하다
    - UI 렌더링을 위한 자바스크립트 라이브러리로 바닐라 js보다 간단한 로직으로 기능 구현이 가능하다
    

Q2. (Q1)을 통해 얻을 수 있는 장점은 무엇일까요?
    - UI 렌더링 시 빠른 성능과 간단한 로직(useState 등)으로 쉽게 기능 구현이 가능하다


Q3. 리액트가 가상 돔을 사용하는 이유는 무엇일까요?
    - 가상 돔은 실제 돔의 사본으로 자바스크립트 객체이며 바뀐 부분만을 감지하여 실제 돔에 리렌더링되기에 높은 효율을 자랑한다
    - 실제 돔에서의 리렌더링은 매번 새로운 도화지에 다시 그림을 그린다면, 가상 돔을 통한 리렌더링은 고칠 부분만 지우개로 지우고 다시 그린다

Q4. 리액트가 가상 돔과 돔 트리를 비교하여 바뀐 부분이 있다면 화면을 다시 그리는 행위를 무엇이라 할까요?
    - 리렌더링


Q5. (Q3)의 행위를 통해 얻을 수 있는 이점은 무엇일까요?
    - 실제 돔은 변경이 일어날 때마다 매번 리렌더링하지만 가상 돔에서 변화가 일어났다고 하는 부분만 리렌더링하기에 훨씬 효율적이다


Q6. (Q3)은 리액트에서 어느 순간에 실현될까요?
    - 동적인 상태 즉 state, 상위에서 하위 컴포넌트로 전달되는 props 등이 변경된다면 리렌더링이 이루어진다

Q7. 훅 함수는 왜 만들게 되었을까요?
    아래의 훅 함수는 각 언제 선언되어야 할까요?
    (1) useState : state를 바꿔서 리렌더링을 시키기 위해
    (2) useRef : 실제 돔의 요소에 접근하기 위해
    (3) useEffect : 특정 작업(Side Effect, 컴포넌트가 렌더링된 후 비동기로 처리해야 할 부수적인 효과)을 실행하기 위
    (4) useMemo : memoization 기법을 함수형 컴포넌트에 적용하여 컴포넌트 렌더링 성능을 올리기 위해
    (5) useCallback : useMemo와 동일한 이유로 사용되며 useMemo가 값이라면, useCallback은 함수다

Q8. 커스텀 훅을 제작하면서 얻을 수 있는 이점은 무엇이고 어느 때 만들어야 할까요?
    -
    -


Q9. 리액트로 프로젝트를 만들려고할 때 고려해야하는 사항들을 아는대로 작성해보세요 (3가지 이상)
    -
    -
    -

Q10. 만약 위의 질문에 모두 답을 했다면, 현재 부족한 것은 리액트가 아닌 자바스크립트 일 수 있습니다
    이전 풀어보았던 자바스크립트 API 문제 1~4와 board 문제를 현재 풀이할 수 있는지 확인해보세요
    
    react로 풀이를 한다고 가정했을 때와 (직접 바꿔보지는 말 것, 예제 문제와 유사)
    vanilla js(java script)로 풀이한다고 하였때 와의 차이점은 무엇일까요?

    * 위 문제를 받지 못한 수강생은 메일 전송 시 따로 첨부하여 송부

    -
    -
    

Q11. 리액트에서 컴포넌트를 나누는 기준은 어떻게 되어야할까요?
     또한, 이러한 관점은 개발자마다 다를 수 있는데 왜 그럴까요?

     -
     -
