React란?

    컴포넌트를 기반으로 Virtual DOM을 조작하여 복잡한 UI와 인터렉션을 설계하는 데 적합한 라이브러리다
    => 컴포넌트로 쪼개기에 유지/보수에서 유리하며 불필요한 렌더링도 줄여 브라우저의 성능을 저하시키지 않는다

    컴포넌트는 함수형과 클래스형이 존재하며 함수형이 더 간편하고 메모리 소모가 적어 더 많이 사용된다

리액트에서 리렌더링

    리액트가 없다면 변화가 생길때마다 렌더 트리가 계속 바뀌며 페이지를 새로 그려야 하지만
    리액트를 사용함으로써 불필요한 렌더링을 줄일 수 있다

CSR과 SSR의 차이

    => 단순히 사용자가 보는 실질적인 화면을 어느 쪽이 완성하는지의 차이
    => CSR은 기본적인 HTML 구조와 자바스크립트는 받아온 뒤 소스코드를 받은 브라우저가 화면을 완성한다
    => SSR은 별도의 API 요청 없이 이미 완제품을 서버가 전달만 한다

SPA와 MPA의 차이

    전통적인 웹페이지는 MPA였다면 리액트가 도입되면서 웹페이지를 한 개로만 구성하는 SPA로 바뀌었다
    => 때문에 CSR에 적합한 리액트는 한 페이지임에도 다른 데이터를 불러올 수 있는 라우팅이 도입된다
    => 규모가 커진다면 자바스크립트 파일이 너무 커져 성능이 떨어질 수 있는 단점이 존재하나 SSR로 해결할 수 있다

번들러란?

    분리된 자바스크립트와 CSS 모듈 코드를 브라우저에 최적화된 여러 개의 파일을 묶어주는 것이며
    리액트 애플리케이션에서 널리 사용되는 번들러로 Webpack과 Browserify가 있다
    
웹팩

    웹 어플리케이션의 규모가 커지면서 많은 파일들을 브라우저가 이해하기 쉽고 빠르게 로드하도록 돕는다
    => 여러 개의 나누어진 파일들을 하나로 묶는 라이브러리

리액트 시작

    npx는 일회성 설치, npm은 일반 설치
    npx는 임시로 설치하고 지우기에 메모리 효율이 좋고 사용할때마다 새로 다운로드하여 항상 최신 버전을 사용할 수 있다

    경로 설정 후 npx create-react-app 내가 짓고 싶은 이름
