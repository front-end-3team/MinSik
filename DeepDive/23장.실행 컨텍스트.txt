23.1 소스코드의 타입

    1. 전역 코드: 전역에 존재하는 소스코드 (함수, 클래스 등의 내부 코드는 포함 x) => 전역 실행 컨텍스트
    2. 함수 코드: 함수 내부에 존재하는 소스코드 (함수, 클래스 등의 내부 코드는 포함 x) => 함수 실행 컨텍스트
    3. eval 코드: 빌트인 전역 함수인 eval 함수에 인수로 전달되어 실행되는 소스코드 => eval 실행 컨텍스트
    4. 모듈 코드: 모듈 내부에 존재하는 소스코드 (함수, 클래스 등의 내부 코드는 포함 x) => 모듈 실행 컨텍스트

23.2 소스코드의 평가와 실행

    자바스크립트 엔진은 소스코드를 총 두개의 과정 '소스코드의 평가', '소스코드의 실행'으로 나누어 처리한다

    '소스코드의 평가'
    => 실행 컨텍스트를 생성하고 변수, 함수등의 선언문만 먼저 실행하여 생성된 식별자를 키로 스코프에 등록한다

    '소스코드의 실행'
    => 소스코드의 평가 과정이 끝난다면 진행된다
    => 변수나 함수의 참조를 스코프에서 검색해서 얻으며 소스코드를 실행한다

23.3 실행 컨텍스트의 역할

    1. 전역 코드 평가
       => 선언문만 먼저 실행한다 (호이스팅이 발생하는 과정)

    2. 전역 코드 실행
       => 런타임이 시작되어 코드가 실행되고 함수가 호출된다면 전역 코드에서 함수 내부로 진입한다

    3. 함수 코드 평가
       => 실행 순서가 변경되어 함수 내부로 진입하며 똑같이 매개변수나 지역 변수 선언문이 먼저 실행된다
       => 이후 arguments 객체가 생성되어 지역 스코프에 등록되고 this 바인딩도 결정된다

    4. 함수 코드 실행
       => 코드가 실행되고 스코프 체인을 통해 식별자를 구분하고 바인딩된 값을 참조하며 출력한다

23.4 실행 컨텍스트 스택

    콜 스택이라고도 하며 LIFO 구조
    => 실행 컨텍스트들이 층처럼 쌓인다

    1. 전역 코드의 평가와 실행
        먼저 전역 코드를 평가(선언문 실행)하여 전역 실행 컨텍스트를 생성하고 푸시한다

    2. 함수 코드의 평가와 실행
        전역 함수가 호출되면 함수 내부로 진입하고 함수를 평가하여 푸시한다
    
    3. 중첩 함수 코드의 평가와 실행
        전역 함수의 과정과 동일하다

23.5 렉시컬 환경

    식별자와 식별자에 바인딩된 값, 그리고 상위 스코프에 대한 참조를 기록하는 자료구조로 실행 컨텍스트를 구성하는 컴포넌트다
    => 키와 값을 갖는 객체 형태의 스코프를 생성하여 식별자를 키로 등록하고 식별자에 바인딩된 값을 관리한다
    => 스코프를 구분하여 식별자를 등록하고 관리하는 저장소

    렉시컬 환경을 구성하는 컴포넌트
    1. 환경 레코드: 스코프에 포함된 식별자를 등록하고 등록된 식별자에 바인딩된 값을 관리하는 저장소다
    2. 외부 렉시컬 환경에 대한 참조: 상위 스코프를 가리키며, 단방향 링크드 리스트인 스코프 체인을 구현한다

23.6 실행 컨텍스트의 생성과 식별자 검색 과정

    (1) 전역 객체 생성
        빌트인 객체와 동작 환경에 따른 클라이언트 사이드 등 전역 객체는 전역 코드가 평가되기 이전에 생성된다

    (2) 전역 코드 평가
        1. 전역 실행 컨텍스트 생성
        2. 전역 렉시컬 환경 생성
            2.1. 전역 환경 레코드 생성
                2.1.1. 객체 환경 레코드 생성
                2.1.2. 선언적 환경 레코드 생성
            2.2. this 바인딩
            2.3. 외부 렉시컬 환경에 대한 참조 결정

        변수 호이스팅이 발생하는 원인
        => var 키워드는 평가 과정에서 선언과 초기화가 동시에 진행되기에 변수 선언문 이전에도 참조할 수 있기 때문이다(단, 선언 이전은 undefined)
        => 함수 호이스팅도 위와 동일하다

        let, const 키워드는 호이스팅을 발생하나 일시적 사각지대(Temporal Dead Zone)에 빠지기에 에러가 발생한다

    (3) 전역 코드 실행
        식별자를 결정하기 위해 실행 중인 실행 컨텍스트에서 식별자를 검색하는 과정이 스코프 체인의 동작 원리다
        => 검색할 수 없는 식별자는 참조 에러 ReferenceError를 발생시킨다

    (4) 함수 코드 평가
        1. 함수 실행 컨텍스트 생성
        2. 함수 렉시컬 환경 생성
            2.1. 함수 환경 레코드 생성
            2.2. this 바인딩
            2.3. 외부 렉시컬 환경에 대한 참조

        함수 객체는 자신의 정의된 스코프를 기억하며 어디서 정의했는지에 따라 스코프가 결정된다!
        => 함수 객체 내부 슬롯 [[Environment]]에 상위 스코프에 저장한다

    (5) 함수 코드 실행
        실행 컨텍스트의 렉시컬 환경에서 식별자를 검색한 뒤 참조가 가능하다면 바인딩한 뒤 코드를 실행한다

    (6) 함수 코드 실행 종료
        실행 컨텍스트가 팝(pop)되어 제거되고 종료된다
        => 누군가 참조하지 않을 때까지 메모리에 존재하다 참조되지 않는다면 가비지 컬렉터에 의해 소멸된다

    (7) 전역 코드 실행 종료
        실행 컨텍스트 스택을 다 비울 때까지 pop하며 단계를 지우고 끝나면 종료된다

23.7 실행 컨텍스트와 블록 레벨 스코프

    let, const 키워드가 블록 레벨 스코프인 이유도 렉시컬 환경이 다르기 때문이다