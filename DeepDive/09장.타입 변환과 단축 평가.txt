9.1 타입 변환이란?

    의도가 있다면 => 명시적 타입 변환/타입 캐스팅
    의도가 없다면 => 암묵적 타입 변환/타입 강제 변환

9.2 암묵적 타입 변환

    (1) 문자열 타입으로 변환
        + 연산 중 하나라도 문자열이면 변환된다

    (2) 숫자 타입으로 변환
        - * / 연산자를 사용하면 숫자 타입으로 변환 가능, 가능하지 않다면 NaN
        비교 연산자나 + 단항 연산자가 위에 해당한다
        '', [], null, false는 0으로 true는 1로 변환

    (3) 불리언 타입으로 변환
        Truthy / Falsy 로 암묵적 타입 변환
        false, undefined, null, 0, NaN, '' 제외하면 다 Truthy 값이다!

9.3 명시적 타입 변환

    (1) 문자열 타입으로 변환
        1. String 생성자 함수를 new 연산자 없이 호출
        2. Object.prototype.toString 메서드 사용
        3. 문자열 연결 연산자를 이용

    (2) 숫자 타입으로 변환
        1. Number 생성자 함수를 new 연산자 없이 호출
        2. parseInt, parseFloat 함수를 사용 (단, 문자열만 숫자로 변환 가능)
        3. + 단항 산술 연산자 사용
        4. * 산술 연산자 사용

    (3) 불리언 타입으로 변환
        1. Boolean 생성자 함수를 new 연산자 없이 호출
        2. ! 부정 논리 연산자를 두 번 사용

9.4 단축 평가

    (1) 논리 연산자를 사용한 단축 평가
        표현식을 평가하는 도중에 평가 결과가 확정되면 나머지 평가 과정 생략

        true || anything => true
        false || anything => anything
        true && anything => anything
        false && anything => false

        단축 평가를 사용하여 if문을 대체할 수 있다

    (2) 옵셔널 체이닝 연산자
        ?. 
        => 좌항의 피연산자가 null 또는 undefined인 경우 undefined를 반환
        => 그렇지 않다면 우항의 프로퍼티 참조

    (3) null 병합 연산자
        ??
        => 좌항의 피연산자가 null 또는 undefined인 경우 우항의 피연산자를 반환
        => 그렇지 않다면 좌항의 피연산자를 반환
        변수의 기본값 설정에 유용