12.1 함수란?

    수학의 함수처럼 입력을 받아 출력을 내보낸다
    => 입력은 인수, 전달되는 변수를 매개변수, 출력은 반환값이라 한다

12.2 함수를 사용하는 이유

    코드의 재사용 => 유지보수의 편의성 ↑, 코드의 신뢰성 ↑

12.3 함수 리터럴

    객체이므로 리터럴로 함수를 생성할 수 있다
    => function 키워드, 함수 이름(식별자), 매개변수, 몸체(실행할 코드)로 이루어졌다
    => 일반 객체와 달리 호출이 가능하다!

12.4 함수 정의

    (1) 함수 선언문
        function add(x, y) {
            return x + y;
        }
        표현식이 아닌 문
        => 함수 이름 생략 불가!
        자바스크립트 엔진은 함수 이름과 동일한 이름의 식별자를 암묵적으로 생성
        => 때문에 함수 객체를 가리키는 식별자로 호출

    (2) 함수 표현식
        일급 객체: 값의 성질을 갖는 객체
        선언문과 달리 표현식으로 약간의 차이가 존재
        => 표현식인 문이므로 ;이 붙는다

    (3) 함수 생성 시점과 함수 호이스팅
        함수 선언문은 함수가 호이스팅된다
        => 함수 표현식은 변수에 할당했으므로 변수 호이스팅
        => 이전에 호출하면 undefined로 평가된다!

    (4) Function 생성자 함수
        new 연산자의 유무와 관계없이 호출 가능
        => 함수 선언문이나 표현식과는 다르게 동작!!

    (5) 화살표 함수
        =>를 이용하며, 항상 익명 함수로 정의
        간략한 만큼 기능도 간략하다

12.5 함수 호출

    (1) 매개변수와 인수
        매개변수: 함수 내부에서 변수처럼 취급(스코프 또한 함수 내부)
        매개변수 > 인수: undefined
        매개변수 < 인수: 무시된다(암묵적으로 arguments 객체의 프로퍼티로 보관된다)

    (2) 인수 확인
        자바스크립트는 함수를 평가할 때 매개변수와 인수의 개수를 확인하는데,
        동적 타입 언어이므로 매개변수와 인수의 타입이 같은지 확인해야 한다
        => 문법적으로 문제가 없어도 개발자의 의도에 다르게 동작할 가능성이 있다!!

        해결책으로 타입스크립트나 arguments 객체 또는 단축 평가를 활용한다

    (3) 매개변수의 최대 개수
        이상적인 함수라면 단순한 동작만 하게 해야 한다
        => 매개변수는 최대 3개까지 권장

    (4) 반환문
        함수 호출은 표현식이므로 값이 평가된다
        => 그 값이 바로 return이 반환한 값

        함수의 실행을 중단하고 함수 몸체를 빠져나가고,
        값을 반환하며 명시적으로 지정하지 않으면 undefined를 반환한다

12.6  참조에 의한 전달과 외부 상태의 변경
    
    매개변수도 함수 내부에서는 변수이므로 값에 의한 호출, 참조의 의한 호출이 가능하다
    매개변수로
        원시 값이 전달되면, 깊은 복사로 전달
        객체가 전달되면, 참조 값이 복사되어 전달 => 원본 훼손

12.7 다양한 함수의 형태

    (1) 즉시 실행 함수
        (function () {
            let a = 3;
            let b = 5;
            return a * b;
        }());
        익명 함수를 일반적으로 사용
        => 기명 함수여도 호출이 불가능!!
        함수이므로 값을 반환하거나 인수를 전달할 수 있다

    (2) 재귀 함수
        함수가 자기 자신을 호출
        function countdown(n) {
            for (let i = n; i >= 0, i--) console.log(i);
        }

        function countdown(n) {
            if (n < 0) return;
            console.log(n);
            countdown(n-1);
        }
        두 함수는 같은 기능을 수행한다
        탈출 조건을 반드시 만들어야 한다
        => 그렇지 않다면 스택 오버플로 에러가 발생한다

    (3) 중첩 함수
        함수 내부에 함수가 또 존재하는 경우

    (4) 콜백 함수
        고차 함수: 함수의 매개변수로 다른 함수를 전달받은 함수
        콜백 함수: 매개변수로 호출된 함수
        비동기 처리, 배열 고차 함수에도 사용된다!!

    (5) 순수 함수와 비순수 함수
        순수 함수: 부수 효과가 없다
        비순수 함수: 부수 효과가 있다

        함수형 프로그래밍: 순수 함수와 보조 함수의 조합으로 부수 효과를 최소화
                          => 오류를 피하고 프로그램의 안정성을 높이는 프로그래밍 패러다임
