7.1 산술 연산자

    수학적 계산을 수행해 새로운 숫자 값을 만든다
    => 산술 연산이 불가능한 경우, NaN을 반환

    (1) 이항 산술 연산자
        + - * / %
    
    (2) 단항 산술 연산자
        ++ -- + -

    (3) 문자열 연결 연산자
        + 사용
        => 피연산자 중 하나 이상이 문자열이라면 문자열 연결 연산자로 동작

7.2 할당 연산자

    = 좌항의 변수에 값을 할당, 표현식인 문이다

7.3 비교 연산자

    (1) 동등/일치 비교 연산자
        == === != !==
        ==은 비교하기 전 암묵적 타입 변환 과정을 거친다
        => 따라서 지양하고 ===을 사용한다

        * NaN은 자신과 일치하지 않는 유일한 값으로 조사하려면 빌트인 함수 Number.isNaN을 사용

    (2) 대소 관계 비교 연산자
        > < >= <=

7.4 삼항 조건 연산자

        조건식 ? 조건식이 true일 때 반환할 값 : 조건식이 false일 때 반환할 값
        => if ...else 문과 달리 표현식인 문으로 값처럼 사용 가능

7.5 논리 연산자

    || && !

7.6 쉼표 연산자

    왼쪽부터 평가하고 마지막 피연산자의 평가 결과를 반환

7.7 그룹 연산자

    연산자 우선순위가 가장 높다

7.8 typeof 연산자

    피연산자의 데이터 타입을 문자열로 반환
    null을 반환하는 경우는 없고, 함수라면 function을 반환
    => null이라면 object를 반환

7.9 지수 연산자

    좌항은 밑으로 우항은 지수로 거듭 제곱
    이전에는 Math.pow 메서드를 사용했었다
    음수를 밑으로 사용하려면 괄호로 묶어야 한다
    이항 연산자 중 우선순위가 가장 높다

7.10 그 외의 연산자

    ?. ?? delete new instanceof in

7.11 연산자의 부수 효과

    = ++/-- delete

7.12 연산자 우선순위

    () => ++/-- => 단항 => ** => ===/!== => && => ||

7.13 연산자 결합 순서

    평가를 수행하는 순서