6.1 숫자 타입

    배정밀도 64비트 부동소수점 형식을 따른다
    => 모든 수를 실수로 처리

    특별한 3가지 값을 추가로 가진다
        Infinity
        -Infinity
        NaN

6.2 문자열 타입

    '', "", `` 사용

6.3 템플릿 리터럴

    (1) 멀티라인 문자열
        \로 시작하는 이스케이프 시퀀스를 사용
        일반 문자열 내에선 줄바꿈이 금지된다 
        => \n을 사용

    (2) 표현식 삽입
        ${} 사용

6.4 불리언 타입

    참(true), 거짓(false)

6.5 undefined 타입

    선언만 하고 할당이 이루어지지 않으면 자바스크립트 엔진에 의해 암묵적으로 할당된다

6.6 null 타입

    변수에 값이 없다는 것을 의도적으로 명시할 때 사용
    => 가비지 콜렉션에 의해 메모리 공간에서 제거

6.7 심벌 타입

    다른 값과 중복되지 않는 유일무이한 값
    => 주로 이름이 충돌할 위험이 없는 객체의 유일한 프로퍼티 키를 만들기 위해 사용

6.8 객체 타입

    위 6가지 원시 타입을 제외 나머지 모든 값이 객체 타입!!

6.9 데이터 타입의 필요성

    (1) 데이터 타입에 의한 메모리 공간의 확보와 참조
        효율적으로 메모리를 관리하기 위해 변수에 할당되는 값의 타입을 구별해야 한다
        => 이는 값을 참조할 때도 마찬가지다

    (2) 데이터 타입에 의한 값의 해석
        -값을 저장할 때 확보해야 하는 메모리 공간의 크기를 결정하기 위해
        -값을 참조할 때 한 번에 읽어 들여야 할 메모리 공간의 크기를 결정하기 위해
        -메모리에서 읽어 들인 2진수를 어떻게 해석할지 결정하기 위해

6.10 동적 타이핑

    (1) 동적 타입 언어와 정적 타입 언어
        정적 타입 언어는 말 그대로 변경 불가
        => 자바스크립트는 동적
        => 변수가 아닌 값이 타입을 가지며 변수는 값의 별명에 지나지 않는다

    (2) 동적 타입 언어와 변수
        유연성은 높지만 신뢰성이 떨어지는 단점을 보유
