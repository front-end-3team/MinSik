DOM: HTML 문서의 계층적 구조와 정보를 표현하며 이를 제어할 수 있는 API
     => 프로퍼티와 메서드를 제공하는 트리 자료구조

39.1 노드

    (1) HTML 요소와 노드 객체
        HTML 요소는 렌더링 엔진에 의해 파싱되어 DOM을 구성하는 요소 노드 객체로 변환된다
        => 중첩 관계를 갖기에 다른 HTML 요소도 포함할 수 있다

        * 트리구조: 부모 노드와 자식 노드로 구성되어 노드 간의 계층적 구조를 표현하는 비선형 자료구조

        HTML 요소들이 노드 객체로 변환되고 그 노드 객체들로 구성된 트리 자료구조가 DOM이며 DOM 트리라고도 한다

    (2) 노드 객체의 타입
        총 12개의 종류가 있지만 가장 중요한 노드 타입은 4가지다
        
        1. 문서 노드
            DOM 트리의 최상위에 존재하는 루트 노드로서 document 객체를 가리킨다
            document 객체는 브라우저가 렌더링한 HTML 문서 전체를 가리키며 전역 객체 window의 document 프로퍼티에 바인딩되어 있다

        2. 요소 노드
            HTML 요소 간의 중첩에 의해 부자 관계를 가지며, 이 관계를 통해 정보를 구조화한다
            => 문서의 구조를 표현한다

        3. 어트리뷰트 노드
            HTML 요소의 어트리뷰트를 가리키는 객체로 요소 노드와 달리 부모 노드가 없기에
            참조하고 싶다면 먼저 부모 노드가 있는 요소 노드에 접근해야 한다

        4. 텍스트 노드
            HTML 요소의 텍스트를 가리키는 객체로 문서의 정보를 표현한다
            요소 노드의 자식 노드며 자식 노드를 가질 수 없는 리프 노드다
            참조하고 싶다면 어트리뷰트 노드처럼 먼저 요소 노드에 접근해야 한다

    (3) 노드 객체의 상속 구조
        DOM을 구성하는 노드 객체는 브라우저 환경에서 추가적으로 제공하는 호스트 객체며 프로토타입에 의한 상속 구조를 갖는다
        => 프로토타입 체인에 있는 모든 프로토타입의 프로퍼티나 메서드를 상속받아 사용할 수 있다
        => HTML 요소가 갖는 공통적인 기능은 HTMLElement 인터페이스 제공한다
        => 종류에 따라 고유한 기능도 존재한다
        => 이런 기능들은 프로토타입 기반 상속 관계를 갖는 DOM의 특징이며 DOM API를 통해 동적으로 조작할 수 있다
        => HTML을 DOM과 연관 지어서 보자!!

39.2 요소 노드 취득

    (1) id를 이용한 요소 노드 취득
        Document.prototype.getElementById 메서드를 통해 id 어트리뷰트 값을 갖는 하나의 요소 노드를 탐색한다
        => 중복된 id 값을 갖는 요소가 있다면 가장 첫 번째 요소 노드만 반환하며 id 값을 갖는 요소 없다면 null을 반환한다
        => HTML 요소에 id 어트리뷰트를 부여하면 암묵적으로 id 값과 동일한 이름의 전역 변수가 선언되고 해당 노드 객체가 할당된다

    (2) 태그 이름을 이용한 요소 노드 취득
        getElementsByTagName 메서드로 탐색한 모든 요소 노드들을 반환한다
        => 여러 개를 갖고 오기에 HTMLCollection 객체(유사 배열 객체이면서 이터러블)를 반환한다
        => document에 정의된 DOM 전체에서 요소 노드를 탐색하여 반환한다
        => element에서 정의된 메서드는 특정 요소 노드를 통해 호출한다
        => 태그 이름을 갖는 요소가 없다면 빈 HTMLCollection 객체를 반환한다

    (3) class를 이용한 요소 노드 취득
        getElementsByClassName 메서드로 탐색한 모드 요소 노드를 HTMLCollection 객체의 형태로 반환한다
        => 태그 이름을 이용하는 것처럼 document로 정의된 메서드, element에서 정의된 메서드가 있으며 동일하게 동작한다

    (4) CSS 선택자를 이용한 요소 노드 취득
        querySelector 메서드를 사용하며 하나의 요소 노드를 반환한다
        => id 값으로 받아오는 메서드와 동일하게 동작한다

        querySelectorAll 메서드는 모든 요소를 탐색하고 NodeList 객체(유사 배열 객체이면서 이터러블)를 반환한다

    (5) 특정 요소 노드를 취득할 수 있는지 확인
        matches 메서드를 통해 CSS 선택자를 통해 특정 요소 노드를 취득할 수 있는지 확인하여 불리언 값을 반환한다

    (6) HTMLCollection과 NodeList
        DOM 컬렉션 객체로서 여러 개의 값을 반환할 수 있다
        => 반복문이나 스프레드 문법을 사용할 수 있다

        HTMLCollection
            노드 객체의 상태 변화를 실시간으로 반영하는 살아 있는 DOM 컬렉션 객체다
            => 실시간으로 상태 변경을 반영하여 요소가 제거될 수도 있기에 for 문을 역방향을 순회하거나 while 문으로 회피할 수 있다
            => 제일 간단한 해결책은 배열로 변환(스프레드 문법 등)하여 배열 고차 함수를 사용하는 것이다

        NodeList
            실시간으로 상태 변경을 반영하지 않는 객체다
            => childNodes 프로퍼티가 반환하는 NodeList 객체는 live 객체로 동작하기에 유의해야 한다

        HTMLCollection, NodeList 모두 예상과 달리 동작할 수 있기에 배열로 변환하여 사용하자!!

39.3 노드 탐색

    노드 탐색 프로퍼티는 모두 접근자 프로퍼티며 getter 함수만 존재하기에 참조만 가능한 읽기 전용이다

    (1) 공백 텍스트 노드
        HTML 요소 사이의 스페이스, 탭, 줄바꿈 등의 공백 문자는 텍스트 노드를 생성한다
    
    (2) 자식 노드 탐색
        Node.prototype.childNodes
            자식 노드를 모두 탐색하여 NodeList에 담아 반환하며 텍스트 노드도 포함되어 있을 수 있다

        Element.prototype.children
            자식 노드 중 요소 노드만 탐색하여 HTMLCollection에 담아 반환하며 텍스트 노드는 포함되지 않는다

        Node.prototype.firstChild
            첫 번째 자식 노드를 반환하며 텍스트 노드이거나 요소 노드다
        
        Node.prototype.lastChild
            마지막 자식 노드를 반환하며 텍스트 노드이거나 요소 노드다

        Element.prototype.firstElementChild
            첫 번째 자식 요소 노드를 반환하며 무조건 요소 노드다

        Element.prototype.lastElementChild
            마지막 자식 요소 노드를 반환하며 무조건 요소 노드다

    (3) 자식 노드 존재 확인
        Node.prototype.hasChildNodes 메서드를 통해 자식 노드의 존재 여부를 불리언 값으로 반환하며 텍스트 노드도 포함한다
        => 자식 요소 노드의 존재를 확인하려면 childElementCount 프로퍼티를 사용한다

    (4) 요소 노드의 텍스트 노드 탐색
        텍스트 노드는 요소 노드의 자식 노드이므로 firstChild 프로퍼티를 확인한다

    (5) 부모 노드 탐색
        Node.prototype.parentNode 프로퍼티를 사용하고 텍스트 노드는 리프 노드이기에 부모 노드가 될 수 없다

    (6) 형제 노드 탐색
        어트리뷰트 노드는 부모 노드가 같지 않기에 텍스트 노드나 요소 노드만 반환한다

        Node.prototype.previousSibling
            부모 노드가 같은 형제 노드 중 자신의 이전 형제 노드를 반환하며 요소 노드이거나 텍스트 노드일 수 있다

        Node.prototype.nextSibling
            부모 노드가 같은 형제 노드 중 자신의 다음 형제 노드를 반환하며 요소 노드이거나 텍스트 노드일 수 있다
        
        Element.prototype.parentElementSibling
            부모 노드가 같은 형제 요소 노드 중 자신의 이전 형제 요소 노드를 반환한다
        
        Element.prototype.nextElementSibling
            부모 노드가 같은 형제 요소 노드 중 자신의 다음 형제 요소 노드를 반환한다

39.4 노드 정보 취득

    Node.prototype.nodeType 프로퍼티 중
        Node.ELEMENT_NODE: 요소 노드 타입을 나타내는 상수 1을 반환
        Node.TEXT_NODE: 텍스트 노드 타입을 나타내는 상수 3을 반환
        Node.DOCUMENT_NODE: 문서 노드 타입을 나타내는 상수 9를 반환

    Node.prototype.nodeName 프로퍼티 중
        요소 노드: 대문자 문자열로 태그 이름을 반환
        텍스트 노드: 문자열 "#text"를 반환
        문서 노드: 문자열 "#document"를 반환

39.5 요소 노드의 텍스트 조작

    (1) nodeValue
        setter와 getter 모두 존재하는 접근자 프로퍼티로 참조와 할당이 모두 가능하다
        => 텍스트 노드의 텍스트틀 반환하며 텍스트 노드가 아니라면 null을 반환한다
        => 값을 할당하여 텍스트를 변경할 수 있다

    (2) textContent
        setter와 getter 모두 존재하는 접근자 프로퍼티로 참조와 할당이 모두 가능하다
        => 요소 노드의 childNodes 프로퍼티가 반환한 모든 노드들의 텍스트를 모두 참조 가능하다
        => 유사한 동작을 하는 innerText 프로퍼티가 있지만 사용하지 말자

39.6 DOM 조작

    (1) innerHTML
        setter와 getter 모두 존재하는 접근자 프로퍼티로 참조와 할당이 모두 가능하다
        => 참조하게 되면 모든 HTML 마크업을 문자열로 반환한다
        => 문자열 안에 새로운 문자열 형태로 추가하게 되면 간단하게 DOM 조작이 가능하다
        => 간단한만큼 크로스 사이트 스크립팅 공격에 취약하므로 위험하다
        => 모든 자식 노드를 제거하고 새롭게 요소 노드를 생성하기에 효율적이지 않다
    
    (2) insertAdjacentHTML 메서드
        기존 요소를 제거하지 않으면서 위치를 지정해 새로운 요소를 삽입한다
        => 다만 여전히 크로스 사이트 스크립팅 공격에 취약하다

    (3) 노드 생성과 추가

        Document.prototype.createElement(tagName) 메서드를 통해 요소 노드를 생성하여 반환한다

        Document.prototype.createTextNode(text) 메서드를 통해 텍스트 노드를 생성하여 반환한다

        Node.prototype.appendChild(childNode) 메서드를 통해 마지막 자식 노드로 추가한다

    (4) 복수의 노드 생성과 추가
        반복문을 통해 노드를 생성하고 추가한다면 그만큼 리플로우와 리페인트가 되기에 비효율적이다
        => 컨테이너 요소를 미리 생성하고 추가할 요소 노드는 컨테이너 요소에 자식 노드로 추가한 뒤 컨테이너 요소를 DOM 트리에 연결하자
        => 단 컨테이너 요소를 사용하면 불필요한 컨테이너 요소가 추가되므로 이는 DocumentFragment 노드로 해결하자
        => 결론적으로 DocumentFragment 노드는 반복문처럼 동작하며 리플로우와 리페인트는 1번만 실행되니 사용하자

    (5) 노드 삽입
        appendChild 메서드는 언제나 마지막 자식 노드로 추가한다

        insertBefore(newNode, childNode) 메서드는 첫 번째 인수의 노드를 두 번재 인수의 노드 앞에 삽입한다
        => 두 번째로 전달되는 노드는 반드시 insertBefore 메서드를 호출한 노드의 자식 노드이어야 한다

    (6) 노드 이동
        이미 존재하는 노드를 다시 추가하면 현재 위치에서 제거하고 새로운 위치에 추가한다

    (7) 노드 복사
        cloneNode([deep: true | false]) 메서드는 노드의 사본을 생성하여 반환한다
        => true면 깊은 복사, false면 얕은 복사를 수행한다

    (8) 노드 교체
        replaceChild(newChild, oldChild) 메서드는 자신을 호출한 노드의 자식 노드를 다른 노드로 교체한다
        => 교체된 oldChild 노드는 DOM에서 제거된다

    (9) 노드 삭제
        removeChild(child) 메서드는 DOM에서 전달된 노드를 삭제한다

39.7 어트리뷰트

    (1) 어트리뷰트 노드와 attributes 프로퍼티
        HTML 요소는 여러 개의 어트리뷰트(속성)을 가진다
        => 공통적인 속성도 한정적인 속성도 존재한다
        => 속성은 어트리뷰트 노드로 변환되어 요소 노드와 연결되며 어트리뷰트 하나당 하나의 어트리뷰트 노드가 생성된다
        => 모든 어트리뷰트 노드의 참조는 유사 배열 객체이자 이터러블인 NameNodeMap 객체로 가능하다

    (2) HTML 어트리뷰트 조작
        attributes 프로퍼티는 getter만 존재하는 읽기 전용 접근자 프로퍼티라 불편하다

        getAttribute 메서드로 HTML 어트리뷰트 값을 참조하고,
        setAttribute 메서드로 할당이 가능하며,
        hasAttribute 메서드로 존재 여부를 확인할 수 있고,
        removeAttribute 메서드로 삭제할 수 있다

    (3) HTML 어트리뷰트 vs. DOM 프로퍼티
        요소 노드 객체에는 HTML 어트리뷰트에 대응하는 DOM 프로퍼티가 존재한다
        => DOM 프로퍼티는 getter와 setter 모두 존재하는 접근자 프로퍼티로 참조와 할당이 가능하다

        HTML 어트리뷰트의 역할은 HTML 요소의 초기 상태를 지정하며, 변하지 않는다!!

        요소 노드는 상태(state)를 갖고 있다
        => 2개의 상태, 즉 초기 상태와 최신 상태를 관리해야 하며 초기 상태는 어트리뷰트 노드가 최신 상태는 DOM 프로퍼티가 관리한다
        => 사용자 입력에 의한 상태 변화와 관계있는 DOM 프로퍼티(ex. value, checkbox 요소 등)만 최신 상태 값을 관리한다
        => HTML 어트리뷰트와 DOM 프로퍼티가 모두 1:1 대응을 하는 것은 아니다

    (4) data 어트리뷰트와 dataset 프로퍼티
        HTML 요소에 정의한 사용자 정의 어트리뷰트와 자바스크립트 간에 데이터를 교환할 수 있다
        => HTMLElement.dataset 프로퍼티로 취득하면 DOMStringMap 객체 형태로 반환받고 참조 또는 할당할 수 있다

39.8 스타일

    (1) 인라인 스타일 조작
        HTMLElement.prototype.style 프로퍼티는 getter와 setter 모두 존재하는 접근자 프로퍼티로 요소 노드의 인라인 스타일을 참조/할당 가능하다
        => CSSStyleDeclaration 타입의 객체를 반환하며 CSS 프로퍼티에 대응하는 프로퍼티가 인라인 스타일로 추가/변경된다

    (2) 클래스 조작
        .으로 시작하는 클래스 선택자를 사용하여 스타일을 변경할 수 있다
        => 단 className, classList 프로퍼티로 접근하여 추가/변경해야 한다

        className 프로퍼티는 문자열을 반환하므로 공백으로 구분된 여러 개의 클래스를 반환하는 경우 다루기가 불편하다

        classList 프로퍼티는 class 어트리뷰트의 정보를 담은 DOMTokenList 객체를 반환한다
        => add, remove, item 등 유용한 메서드를 제공하는 유사 배열 객체이면서 이터러블이다
    
    (3) 요소에 적용되어 있는 CSS 스타일 참조
        style 프로퍼티는 인라인 스타일만 반환하기에 클래스를 적용한 스타일이나 상속을 통한 스타일은 참조할 수 없다
        => 모든 CSS 스타일을 참조하려면 getComputedStyle 메서드를 사용한다
        => CSSStyleDeclaration 객체에 담기며 HTML 문서의 모든 스타일이 전부 담긴다
    
39.9 DOM 표준

    4개의 버전이 있다