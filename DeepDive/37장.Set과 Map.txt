37.1 Set

    Set 객체는 중복되지 않는 유일한 값들의 집합이다
    => 배열과 비슷하나 순서가 없고 중복이 되지 않는다는 차이가 있다

    (1) Set 객체의 생성
        new 연산자와 함께 Set 생성자 함수로 생성한다
        => 이터러블을 인수로 전달받아 객체를 생성하며, 이터러블의 중복값은 저장되지 않는다 (filter와 비슷하다)

    (2) 요소 개수 확인
        size 프로퍼티를 사용하면 요소 개수를 확인할 수 있다
        => size 프로퍼티는 접근자 프로퍼티로 getter 함수만 존재하므로 검색은 가능하나 재할당이 불가능하다
    
    (3) 요소 추가
        add 메서드를 사용하면 요소(자바스크립트의 모든 값)를 추가할 수 있다
        => 중복은 추가되지 않으며 오류는 발생하지 않고 무시된다

    (4) 요소 존재 여부 확인
        has 메서드를 사용하며 불리언 값을 반환한다

    (5) 요소 삭제
        delete 메서드를 사용하며 인덱스가 아닌 삭제할 요소값을 인수로 전달해야 한다(Set 객체는 순서가 없기 때문)
        => delete 메서드는 삭제 성공 여부를 나타내는 불리언 값을 반환한다
        => add 메서드와 달리 메서드 체인이 불가능하다
    
    (6) 요소 일괄 삭제
        clear 메서드를 사용하며, 언제나 undefined를 반환한다

    (7) 요소 순회 
        Set 객체는 이터러블이므로 forEach, for of, 스프레드 문법 등 순회가 가능하다
        => Set 객체는 순서가 없으나 순회하는 순서는 요소가 추가된 순서를 따르는데 다른 이터러블의 순회와 호환성을 유지하기 위함이다

    (8) 집합 연산
        Set 객체는 수학적 집합을 구현하기 위한 자료구조이기에 교집합, 합집합, 차집합 등을 구현할 수 있다

37.2 Map

    키와 값의 쌍으로 이루어진 컬렉션이며, 객체와 유사하나 이터러블이며 키로 모든 값을 사용할 수 있다는 차이가 존재한다

    (1) Map 객체의 생성
        new 연산자와 함께 Map 생성자 함수로 생성한다
        => 이터러블을 인수로 전달받으며, 인수로 전달되는 이터러블은 키와 값의 쌍으로 이루어진 요소로 구성되어야 한다
        => Set 객체와 달리 중복되는 키가 있다면 덮어씌어져(재할당) 중복된 키를 갖는 요소가 없다

    (2) 요소 개수 확인
        size 프로퍼티를 사용하며, getter 함수만 존재하는 접근자 프로퍼티다

    (3) 요소 추가
        set 메서드를 사용하며, 새로운 요소가 추가된 Map 객체를 반환한다
        => Map 객체는 모든 값을 키로 사용하기에 문자열이나 심벌 값만 키로 사용할 수 있는 일반 객체와의 큰 차이점이 여기서 드러난다

    (4) 요소 취득
        get 메서드를 사용하며, 인수로 전달되는 키를 갖는 요소가 없다면 undefined를 반환한다

    (5) 요소 존재 여부 확인
        has 메서드를 사용하며, 요소 존재 여부를 나타내는 불리언 값을 반환한다
    
    (6) 요소 삭제
        delete 메서드를 사용하며, 삭제 성공 여부를 불리언 값으로 반환하며, 메서드 체인이 불가능하다

    (7) 요소 일괄 삭제
        clear 메서드를 사용하며, 언제나 undefined를 반환한다

    (8) 요소 순회
        Set 객체와 같이 이터러블이기에 요소 순회가 가능하며 순회하는 순서는 요소가 추가된 순서를 따른다 
