27.1 배열이란?

    배열: 여러 개의 값을 순차적으로 나열한 자료구조
    => 배열이 가지고 있는 값은 요소라 한다(값이라 부르는 모든 것은 다 요소가 될 수 있다)
    => 배열의 요소는 자신의 위치를 나타내는 인덱스를 가진다
    => length 프로퍼티를 가지며, 이터러블 객체이다(사실 자바스크립트에는 배열이란 타입은 없다)
    => 일반 객체와의 차이라면 값의 순서(인덱스)와 length 프로퍼티의 존재한다는 점이다

27.2 자바스크립트 배열은 배열이 아니다

    배열의 요소는 하나의 데이터 타입으로 통일되어 있으며 서로 연속적으로 인접해 있는데 이를 밀집 배열이라 한다
    => 단 자바스크립트의 배열은 연속적으로 이어져 있지 않은 희소 배열이다
    => 인덱스로 요소에 접근하는 성능은 느리나 삽입/삭제에 빠른 성능을 기대할 수 있다

27.3 length 프로퍼티와 희소 배열

    length 프로퍼티 값을 변경할 수 있는데 요소의 개수보다 큰 숫자 값을 할당해도 실제 배열의 길이는 늘어나지 않는다
    => 빈 요소를 생성하지도 메모리 확보도 하지 않고 텅 비어 있는데 바로 희소 배열의 특징이다
    => 그래도 같은 타입의 요소를 연속적으로 위치시켜 희소 배열을 사용하지 말자

27.4 배열 생성

    (1) 배열 리터럴
        객체 리터럴과 달리 프로퍼티 값만 존재한다

    (2) Array 생성자 함수
        전달된 인수가 없으면 빈 배열을 생성한다
        전달된 인수가 1개이고 숫자인 경우 length 프로퍼티 값이 인수인 배열을 생성한다
        전달된 인수가 2개 이상이거나 숫자가 아니면 인수를 요소로 갖는 배열을 생성한다(new 연산자 없이 호출 가능)

    (3) Array.of
        전달된 인수가 1개이고 숫자여도 인수를 요소로 갖는 배열을 생성한다

    (4) Array.from
        유사 배열 객체 또는 이터러블 객체를 인수로 전달받아 배열로 반환한다
        두 번째 인수로 콜백 함수를 통해 요소를 채울 수 있다

27.5 배열 요소의 참조

    [] 표기법을 사용하고 안에는 인덱스가 온다

27.6 배열 요소의 추가와 갱신

    동적으로 추가 가능하며 length 프로퍼티 값은 갱신되며 정수가 아닌 다른 값(ex 문자열)을 인덱스로 사용하면 프로퍼티가 생성된다(length에 영향 x)

27.7 배열 요소의 삭제

    delete 연산자를 사용하여 삭제가 가능하지만 희소 배열로 만들기 때문에 지양하자

27.8 배열 메서드

    Array 생성자 함수는 정적 메서드(인스턴스 없이 호출 가능)를 제공한다
    원본을 직접 변경하는 메서드, 새로운 배열을 생성하여 반환하는 메서드 두 가지로 나눌 수 있다

    (1) Array.isArray
        전달된 인수가 배열이면 true, 아니면 false를 반환한다
    
    (2) Array.prototype.indexOf
        원본 배열에 인수로 전달된 요소 중 첫 번째로 검색된 인덱스를 반환하고 없다면 -1을 반환한다
        => includes 메서드로 대체 가능

    (3) Array.prototype.push
        원본을 변경하며 인수로 전달받은 모든 값을 마지막 요소로 추가하고 변경된 length 프로퍼티 값을 반환한다
    
    (4) Array.prototype.pop
        원본을 변경하며 마지막 요소를 제거하고 제거한 요소를 반환한다(빈 배열이라면 undefined 반환)

    (5) Array.prototype.unshift
        원본을 변경하며 인수로 전달받은 모든 값을 맨 앞에 추가하고 변경된 length 프로퍼티 값을 반환한다

    (6) Array.prototype.shift
        원본을 변경하며 첫 번째 요소를 제거하고 제거한 요소를 반환한다

    (7) Array.prototype.concat
        인수로 전달된 값을 마지막 요소로 추가한 새로운 배열을 반환한다

    (8) Array.prototype.splice
        원본을 변경하며 중간에 요소 추가/삭제가 가능하며 3개의 매개변수가 있다
        start: 원본 배열의 요소를 제거하기 시작할 인덱스
        deleteCount: 옵션이며 start부터 제거할 요소의 개수
        items: 옵션이며 제거한 위치에 삽입할 요소
        특정 요소의 인덱스를 취득한 다음 제거할 때 사용한다

    (9) Array.prototype.slice
        인수로 전달된 범위의 요소들을 복사하여 배열로 반환하며 2개의 매개변수가 있다
        start: 복사를 시작할 인덱스
        end: 복사를 종료할 인덱스(해당 인덱스의 프로퍼티 값은 포함 x)
        인수를 모두 생략하며 얕은 복사가 되어 복사본을 생성한다
        Array.from 메서드와 마찬가지로 유사 배열 객체 또는 이터러블 객체를 배열로 변환할 수 있다

    (10) Array.prototype.join
        원본 배열의 모든 요소를 문자열로 바꾸고 인수로 전달받은 문자열(구분자)로 연결한 문자열을 반환한다(default 구분자는 ,이다)

    (11) Array.prototype.reverse
        원본 배열을 변경하며 배열 순서를 반대로 뒤집고 변경된 배열을 반환한다

    (12) Array.prototype.fill
        원본 배열을 변경하며 인수로 전달받은 값을 배열의 처음부터 끝까지 요소로 채운다
        두 번째 인수로 채우기 시작할 인덱스를 전달하고 세 번째 인수로 멈출 인덱스를 전달한다

    (13) Array.prototype.includes
        배열 내 특정 요소가 포함되어 있는지 확인하여 true/false를 반환한다
        첫 번째 인수로 검색할 대상을 지정하고 두 번째 인수로 검색을 시작할 인덱스를 전달한다
    
    (14) Array.prototype.flat
        인수로 전달한 깊이만큼 중첩된 배열을 평탄화한다

27.9 배열 고차 함수

    (1) Array.prototype.sort
        원본 배열을 변경하며 배열의 요소를 정렬하고 정렬된 배열을 반환한다
        기본적으로 오름차순으로 요소를 정렬하지만 유니코드를 따르기에 숫자 타입은 비교 함수를 인수로 전달해야 한다

    (2) Array.prototype.forEach
        반복문이 필요한 처리를 콜백 함수로 전달받아 로직의 흐름을 이해하기 좋다
        => 모든 요소를 순회하며 콜백 함수를 반복 호출한다
        => 콜백 함수는 배열의 요소값, 인덱스, forEach 메서드를 호출한 배열 총 3개의 인수를 전달받는다
        => 희소 배열이면 순회하지 않고 break, continue 문을 사용할 수 없다

    (3) Array.prototype.map
        자신을 호출한 배열의 모든 요소를 순회하면서 콜백 함수의 반환값들로 구성된 새로운 배열을 반환한다
        forEach 메서드의 콜백 함수와 똑같은 인수를 전달받고 화살표 함수를 사용하면 this 사용이 편하다
    
    (4) Array.prototype.filter
        모든 요소를 순회하면서 콜백 함수의 반환값이 true인 요소로만 구성된 새로운 배열을 반환한다
        중복 요소를 모두 제거할 수 있다

    (5) Array.prototype.reduce
        모든 요소를 순회하며 콜백 함수의 반환값을 다음 순회 시 콜백 함수의 첫 번째 인수로 전달하면서 하나의 결과값을 반환한다
        첫 번재 인수로 콜백 함수, 두 번째 인수로 초기값을 전달받는다
        콜백 함수는 초기값 또는 콜백 함수의 이전 반환값, 배열의 요소값, 인덱스, reduce 메서드를 호출한 배열 총 4개의 인수를 갖는다
        초기값을 무조건 전달하자!!

    (6) Array.prototype.some
        모든 요소를 순회하면서 콜백 함수의 반환값이 단 한 번이라도 참이면 true, 모두 거짓이면 false를 반환한다(빈 배열은 항상 false)

    (7) Array.prototype.every
        모든 요소를 순회하면서 단 한 번이라도 거짓이면 false를, 모두 참이면 true를 반환한다(빈 배열은 항상 true)

    (8) Array.prototype.find
        모든 요소를 순회하면서 콜백 함수의 반환값이 true인 첫 번째 요소를 반환하고 없으면 undefined를 반환한다

    (9) Array.prototype.findIndex
        모든 요소를 순회하면서 콜백 함수의 반환값이 true인 첫 번째 요소의 인덱스를 반환하고 없으면 -1을 반환한다

    (10) Array.prototype.flatMap
        map 메서드와 flat 메서드를 순차적으로 실행한다(하지만 1단계만 평탄화한다)