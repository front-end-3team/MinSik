자바스크립트는 다른 언어와 달리 운영체제나 가상 머신이 아닌 브라우저에서 HTML, CSS와 함께 실행된다

브라우저는 다음과 같은 과정을 거쳐 렌더링을 수행한다
    1. HTML, CSS, 자바스크립트, 이미지 등 렌더링에 필요한 리소스를 요청하고 서버로부터 응답을 받는다
    2. 브라우저의 렌더링 엔진은 서버로부터 응답된 HTML과 CSS를 파싱하여 DOM과 CSSOM을 생성하고 결합한 뒤 렌더 트리를 생성한다
    3. 자바스크립트 엔진은 서버로부터 응답된 자바스크립트를 파싱하여 AST를 생성하고 바이트 코드로 변환하여 실행한다
       이때 자바스크립트는 DOM API를 통해 DOM이나 CSSOM을 변경할 수 있다. 만약 변경된다면 다시 렌더 트리로 결합된다
    4. 렌더 트리를 기반으로 HTML 요소의 레이아웃을 계산하고 브라우저 화면에 HTML 요소를 페인팅한다

38.1 요청과 응답

    브라우저의 핵심 기능은 필요한 리소스를 요청하고 서버로부터 응답받아 브라우저에 시각적으로 렌더링하는 것이다
    => 브라우저 주소창의 URL의 호스트 이름이 DNS를 통해 IP 주소로 변환되고 이 IP 주소를 갖는 서버에게 요청을 전송한다
    => 일반적으로 서버는 루트 요청에 의해 암묵적으로 index.html을 응답하도록 설정되어 있다
    => 자바스크립트를 통해 동적으로 서버에 정적/동적 데이터를 요청할 수도 있다
    => 브라우저의 렌더링 엔진은 HTML을 파싱하는 도중 외부 리소스르 로그하는 태그 등을 만나면
       HTML 파싱을 일시 중단하고 해당 리소스 파일을 먼저 요청한다

38.2 HTTP 1.1과 HTTP 2.0

    HTTP는 웹에서 브라우저와 서버가 통신하기 위한 프로토콜이다
    1.1은 동시 전송이 불가능하여 리소스의 개수에 비례하여 응답 시간이 증가하는 단점이 있다
    2.0은 동시 전송이 가능하여 1.1에 비해 약 50% 정도 빠르다

38.3 HTML 파싱과 DOM 생성

    HTML 문서는 문자열로 이루어진 순수한 텍스트이므로 브라우저에 시각적으로 렌더링하려면 브라우저가 이해할 수 있는 객체로 변환해야 한다
    => 브라우저가 이해할 수 있는 자료구조가 바로 DOM(HTML 문서를 파싱한 결과)이다

38.4 CSS 파싱과 CSSOM 생성

    렌더링 엔진은 DOM을 생성하다가 CSS를 로드하는 link 태그나 style 태그를 만나면 DOM 생성을 일시 중단한다
    => CSS 또한 HTML과 동일한 파싱 과정을 거친 후 CSSOM을 생성한다
    => 이후 CSS 파싱이 끝나면 다시 HTML을 파싱한다
    => CSSOM은 CSS의 상속을 반영하여 생성된다

38.5 렌더 트리 생성

    렌더 트리는 렌더링을 위한 트리 구조의 자료구조로 브라우저 화면에 렌더링되는 노드만으로 구성
    => 완성된 렌더 트리는 각 HTML 요소의 레이아웃을 계산하는 데 사용하며 페인팅 처리에 입력된다

38.6 자바스크립트 파싱과 실행

    HTML 문서를 파싱하여 생성된 DOM은 HTML 요소와 스타일 등을 변경할 수 있는 프로그래밍 인터페이스며 동적으로 조작할 수 있다
    자바스크립트 파싱과 실행은 렌더링 엔진이 아닌 자바스크립트 엔진이 처리한다
    => 자바스크립트를 해석하여 AST를 생성하고 AST를 기반으로 바이트코드를 생성하여 실행한다

38.7 리플로우와 리페인트

    DOM API가 사용되어 변경된다면 렌더 트리로 다시 결합되어 다시 한번 페인팅 과정을 거치는 것을 리페인트라 한다
    => 레이아웃 계산을 다시 하면 리플로우, 재결합된 렌더 트리 기반으로 다시 페인트를 하는 거시 리페인트다

38.8 자바스크립트 파싱에 의한 HTML 파싱 중단

    렌더링 엔진이나 자바스크립트 엔진은 직렬적으로 파싱을 실행한다(동기적)
    때문에 코드 중간에 link 태그나 script 태그가 있다면 DOM 생성이 중단된다
    => 그러므로 자바스크립트는 body 요소의 가장 아래에 위치시키자

38.9 script 태그의 async/defer 어트리뷰트

    src 어트리뷰트를 통해 외부 자바스크립트 파일을 로드하는 경우
    => async 어트리뷰트로 비동기적으로 실행할 수 있으나 순서가 보장되지 않는다
    => defer 어트리뷰트로 비동기적으로 실행되나 DOM 생성이 완료된 직후 진행된다