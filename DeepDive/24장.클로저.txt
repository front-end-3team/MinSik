24.1 렉시컬 스코프

    자바스크립트 엔진은 함수를 어디서 호출했는지가 아니라 함수를 어디서 정의했는지에 따라 상위 스코프를 결정한다
    => 렉시컬 환경의 "외부 렉시컬 환경에 대한 참조"에 저장할 참조값, 즉 상위 스코프에 대한 참조는
       함수 정의가 평가되는 시점에 함수가 정의된 환경에 의해 결정된다

24.2 함수 객체의 내부 슬롯 [[Environment]]

    함수가 정의된 환경과 호출되는 환경은 다르기에 상위 스코프를 기억해야 한다
    => 함수는 자신의 내부 슬롯 [[Environment]]에 상위 스코프의 참조를 저장한다
    => 함수가 정의된 위치만 잘 파악하고 상위 스코프를 잘 찾자!!

24.3 클로저와 렉시컬 환경

    외부 함수보다 중첩 함수가 더 오래 유지되는 경우 중첩 함수는 이미 생명 주기가 종료한 외부 함수의 변수를 참조할 수 있다
    => 위 조건에 부합하는 중첩 함수를 클로저라 부른다
    => 클로저에 의해 참조되는 상위 스코프의 변수를 자유 변수라고 부르며, 클로저란 자유 변수에 대해 닫혀진(묶여있는) 함수라는 의미다

24.4 클로저의 활용

    상태를 안전하게 변경하고 유지하기 위해 사용한다
    => 상태를 안전하게 은닉하고 특정 함수에게만 상태 변경을 허용하기 위해 사용한다

24.5 캡슐화와 정보 은닉

    객체의 상태를 나타내는 프로퍼티와 메서드를 하나로 묶는 것
    => 묶는다는 건 감출 목적도 있기에 정보 은닉이라고 한다
    => 객체의 모든 프로퍼티와 메서드는 기본적으로 public하다
    => 클로저가 있지만 상위 스코프만을 저장하는 렉시컬 환경으로 인해 완전하게 정보 은닉이 지원되지 않는다

24.6 자주 발생하는 실수

    반복문을 돌릴 시 let 키워드를 사용하면 블록 레벨 스코프를 만들기에 코드가 실행될 때마다 새로운 렉시컬 환경을 만든다
    => 다만 블록 내부에 함수가 없다면 곧바로 가비지 컬렉터에 의해 소멸된다
    => var 키워드를 사용한다면 즉시 실행 함수로 감싸자