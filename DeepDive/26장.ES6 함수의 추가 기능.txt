26.1 함수의 구분

    ES6 이전의 모든 함수는 일반 함수로서 호출할 수 있는 것은 물론 생성자 함수로서 호출할 수 있다
    => callable이면서 constructor이다

    이로 인해 ES6에선 함수를 사용 목적에 따라 세 종류로 구분했다(추가적으로 제너레이터 함수와, async 함수가 존재하긴 하다)

    1. 일반 함수: 함수 선언문이나 함수 표현식으로 정의한 함수
    2. 메서드: 메서드 축약 표현으로 정의된 함수만을 말하며 non-constructor이다
    3. 화살표 함수: function 키워드 대신 =>을 사용한다

26.2 메서드

    메서드 축약 표현으로만 정의되어야 하고 non-constructor이기에 인스턴스를 생성할 수 없다
    => 자신을 바인딩한 객체를 가리키는 내부 슬롯 [[HomeObject]]를 갖는다
    => 때문에 super 키워드를 사용할 수 있다

26.3 화살표 함수

    (1) 화살표 함수 정의
        함수 선언문이 아닌 표현식으로 정의해야 한다
        매개변수가 1개일 경우에만 소괄호를 생략할 수 있다
        표현식이 아닌 문이라면 중괄호를 생략할 수 없다
        객체 리터럴을 반환한다면 소괄호로 감싸 주어야 한다

    (2) 화살표 함수와 일반 함수의 차이
        1. 화살표 함수는 인스턴스를 생성할 수 없는 non-constructor이다
        2. 중복된 매개변수 이름을 선언할 수 없다
        3. 화살표 함수는 함수 자체의 this, arguments, super, new.target 바인딩을 갖지 않는다
    
    (3) this    
        화살표 함수는 다른 함수의 인수로 전달되어 콜백 함수로 사용되는 경우가 많기에 this가 다르게 동작한다
        => 화살표 함수는 함수 자체의 this 바인딩을 갖지 않는다
        => 화살표 함수 내부에서 this를 참조하면 상위 스코프의 this를 그대로 참조하며 이를 lexical this라 한다
        => this 바인딩이 없기에 메서드를 화살표 함수로 정의하지 말자!

    (4) super
        this와 마찬가지로 상위 스코프를 참조한다

    (5) arguments
        this나 super와 똑같다

26.4 Rest 파라미터

    (1) 기본 문법
        매개변수 이름 앞에 ...을 붙인다
        => Rest 파라미터는 함수에 전달된 인수들의 목록을 배열로 전달받는다
        => 반드시 마지막 파라미터이어야 하며 단 하나만 선언해야 한다

    (2) Rest 파라미터와 arguments 객체
        일반 함수와 메서드는 Rest 파라미터와 arguments 객체 모두 사용할 수 있지만
        화살표 함수는 arguments 객체를 갖지 않기에 Rest 파라미터를 사용해야 한다

26.5 매개변수 기본값

    인수가 전달되지 않은 매개변수는 undefined이기에 매개변수의 개수만크 인수를 전달하자