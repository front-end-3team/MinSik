34.1 이터레이션 프로토콜

    (1) 이터러블
        Symbol.iterator를 프로퍼티 키로 사용한 메서드를 직접 구현하거나 프로토타입 체인을 통해 상속받은 객체
        => for ... of 문이나 스프레드 문법을 사용하여 순회할 수 있다

    (2) 이터레이터
        이터러블의 Symbol.iterator 메서드를 호출하면 이터레이터를 반환한다
        => 포인터 역할을 하는 next 메서드를 갖는다

34.2 빌트인 이터러블

    Array, String, Map, Set, TypedArray, arguments, DOM 컬렉션

34.3 for ... of 문

    프로토타입 체인에 존재하는 모든 프로퍼티 중 순회가능한 프로퍼티를 열거한다

34.4 이터러블과 유사 배열 객체

    유사 배열 객체: 배열처럼 인덱스로 프로퍼티 값에 접근할 수 있고 length 프로퍼티를 갖는 객체
    => 모든 유사 배열 객체가 이터러블은 아니기에 주의 요망

34.5 이터레이션 프로토콜의 필요성

    다양한 데이터 공급자가 하나의 순회 방식을 갖도록 하여 데이터 소비자가 효율적으로 데이터 공급자를 사용하게 하는 인터페이스다

34.6 사용자 정의 이터러블

    (1) 사용자 정의 이터러블 구현
        Symbol.iterator 메서드를 통해 구현할 수 있다

    (2) 이터러블을 생성하는 함수
        Symbol.iterator 메서드를 통해 구현할 수 있다
    
    (3) 이터러블이면서 이터레이터인 객체를 생성하는 함수
        Symbol.iterator 메서드를 통해 구현할 수 있다

    (4) 무한 이터러블과 지연 평가
        지연 평가를 통해 데이터를 생성하면 메모리의 효율을 높이고 무한도 표현할 수 있다